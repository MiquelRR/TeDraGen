import json
import svgwrite




miny='-v[2]'
minx='-v[0]-v[1]-v[3]'
maxy='v[0]+v[1]+v[2]+v[4]+9.5*v[5]+(v[0]+v[1])*.75'
maxx='v[0]+v[1]+v[4]+10*v[5]'

m1='v[0]+5.3333333*v[5]'
m2='-v[1]-5.3333333*v[5]'
m3='v[1]+5.3333333*v[5]'
d='(2/5)*v[1]+(16/3)*v[5]'



h1='v[0]+v[1]+2*v[4]'
h2=h1+'-0.491554*(v[1]+5.3333333*v[5])+v[5]'
h3=h2+'-v[4]'
h4=h3+'-0.491554*(v[1]+5.3333333*v[5])+v[5]'
h5=h1+'-v[0]-2.6666666*v[5]'
h6=h1+'+v[2]+v[4]+9.5*v[5]'
#h7=h1+'-1.5*v[5]-1.304216867*v[4]'
h7=h1+'-v[4]-1.5*v[5]'

h8=h1+'-v[4]-3.5*v[5]-v[0]+0.3774457831*v[4]'
h9='-.5*v[5]+0.5285714286*v[0]+'+h6 
h10='-.5*v[5]+0.6428571429*v[0]+'+h6 


v1=m1+'-(v[4]+1.3333333333333*v[5])'
v2='1.666666666*v[5]'
v3=m2+'-1.66666666*v[5]'
v4=m2+'-1*('+m1+')+4.666666666666*v[5]'
v5='0.2195945953*('+m2+')'
v6='0.7804054047*('+m2+')'
v7=m1+'-v[4]+1.666666667*v[5]'
v8=m1+'+0.2195945953*('+m3+')-0.66666666666666*v[5]'
v9=m1+'+0.7804054047*('+m3+')+0.66666666666666*v[5]'
v10='-.3*v[1]'
v11=m2+'+.3*v[1]'



p1='v[0]+7*v[5] '+h1+'-v[4]-1.5*v[5]' 
p2='v[0]+7*v[5] '+h1+'-v[4]-3.5*v[5]-v[0]' 
p3='v[0]+v[1]+9*v[5] '+h1+'-v[4]-3.5*v[5]-v[0]'
p4='v[0]+v[1]+9*v[5] '+h1+'-v[4]-1.5*v[5]' 
p5='v[0]+7*v[5] '+h1+'-1.5*v[5]'
p6='v[0]+v[1]+9*v[5] '+h1+'-1.5*v[5]'
p7='v[0]+v[1]+10.666666666*v[5] '+h1+'+1.5*v[5]'
p8=m1+' '+h1+'+1.5*v[5]'
p9=v5+' '+h5
p10=v6+' '+h5
p11='v[0]+3.6666666*v[5] +v[5]+'+h1
p12='1.66666666666667*v[5] v[5]+'+h1
p13='-.5*v[5] '+h1
p14=m2+'+.5*v[5] '+h1
p15=m2+'-1.666666667*v[5] v[5]+'+h1
p16='-v[0]-v[1]-9*v[5] v[5]+'+h1
p17='-v[0]-v[1]-10.6666666666666*v[5] v[5]+'+h1
p18='-v[0]-v[1]-10.6666666666666*v[5] '+h6
p19='-v[0]-v[1]-10.1666666666666*v[5] '+h6
p20=m2+'-.5*v[5] '+h6
p21='-v[1]-4.8333333333*v[5] '+h6+'-.5*v[5]'
p22='-.5*v[5] '+h6+'-.5*v[5]'
p23='.5*v[5] '+h6
p24=m1+'-.5*v[5] '+h6
p25=m1+'+.5*v[5] .5*v[5]+'+h6
p26='v[0]+v[1]+10.1666666666666*v[5] .5*v[5]+'+h6
p27=m1+' '+h6
p28='0 v[5]+'+h1
p29='0 '+h6+'-.5*v[5]'
p30=m2+' '+h6+'-.5*v[5]'
p31=m2+' v[5]+'+h1
p33=v7+'+2.717333333*v[5] '+h1+'-1.5*v[5]-1.304216867*v[4]'
p34=v7+' '+h8+'+1.763333333*v[5]'
p35=m1+'+1.666666667*v[5]+0.3373493976*v[4] '+h1+'-2*v[4]-3.5*v[5]-v[0]'
p36=m1+'+.75*v[5]+0.3373493976*v[4] '+h1+'-2*v[4]-0.7826666667*v[5]-v[0]'
p37=m1+'+4.538666667*v[5]+0.3373493976*v[4] '+h1+'-2*v[4]-3.5*v[5]-v[0]'
p38=m1+'+3.666666667*v[5]+v[1]-0.3373493976*v[4] '+h1+'-2*v[4]-3.5*v[5]-v[0]'
p39=m1+'+0.7946666667*v[5]+v[1]-0.3373493976*v[4] '+h1+'-2*v[4]-3.5*v[5]-v[0]'
p40=m1+'+4.583333333*v[5]+v[1]-0.3373493976*v[4] '+h1+'-2*v[4]-0.7826666667*v[5]-v[0]'
p41='v[0]+v[1]+6.282666667*v[5]+v[4] '+h8+'-0.9166666667*v[5]'
p42='v[0]+v[1]+9*v[5]+v[4] '+h8
p43='v[0]+v[1]+9*v[5]+v[4] '+h8+'+1.763333333*v[5]'
p44='v[0]+v[1]+9*v[5]+v[4] '+h1+'-5.28867*v[5]-1.304216867*v[4]'
p45='v[0]+v[1]+9*v[5]+v[4] '+h1+'-2.41667*v[5]-1.304216867*v[4]'
p46='v[0]+v[1]+6.282666667*v[5]+v[4] '+h1+'-1.5*v[5]-1.304216867*v[4]'
p47='v[0]+v[1]+10.666666666*v[5]-0.3*v[1]'
p48='v[0]+0.7*v[1]+10.666666666*v[5]  .5*v[5]+0.5285714286*v[0]+'+h6
p49='v[0]+0.7*v[1]+10.666666666*v[5]  .5*v[5]+0.65*v[0]+'+h6
p50=m1+'+.3*v[1]+4*v[5]  4.5*v[5]+0.65*v[0]+'+h6 
p51=m1+'+.3*v[1] .5*v[5]+0.5285714286*v[0]+'+h6
p52=m1+'-.5*v[5] +0.7566666667*v[5]+'+h6
p53=m1+'-.5*v[5] 0.5285714286*v[1]+'+h6
p54='2.666666667*v[5]+0.5085857143*v[0] 0.5285714286*v[1]+'+h6
p55='2.666666667*v[5]+0.5085857143*v[0]-0.03903571429*v[1] 0.4680857143*v[1]+'+h6
p56='2.666666667*v[5]+0.5350428571*v[0] 0.3073571429*v[1]+'+h6
p57='1.736666667*v[5]+0.5350428571*v[0] 0.3073571429*v[1]-1.352666667*v[5]+'+h6
p58=p22.split()[0]+' 2.833333333*v[5]+0.65*v[0]+'+h6
p59=p21.split()[0]+'+4*v[5] 6.833333333*v[5]+0.65*v[0]+'+h6
p60=m2+'-1.736666667*v[5]-0.5350428571*v[0] 0.3073571429*v[1]-1.352666667*v[5]+'+h6
p61=m2+'-2.666666667*v[5]-0.5350428571*v[0] 0.3073571429*v[1]+'+h6
p62=m2+'-2.666666667*v[5]-0.5085857143*v[0]+0.03903571429*v[1] 0.4680857143*v[1]+'+h6
p63=m2+'-2.666666667*v[5]-0.5085857143*v[0] 0.5285714286*v[1]+'+h6
p64=p19.split()[0]+' '+p63.split()[1]
p65='-v[3]-v[0]-v[1]-10.6666666666666*v[5] -0.3*v[3]+'+h6
p66='-v[3]-v[0]-v[1]-10.6666666666666*v[5] 0.3*v[3]+v[5]+'+h1
p67=p16.split()[0]+' -v[3]-2*v[5]+'+h1
p68=v4+' -v[3]-4*v[5]+'+h1
p69=p2.split()[0]+'+.5*v[1]+v[5]-11.25 '+p2.split()[1]+'-v[5]'
p70=v10+'-0.01428571429*v[1] '+h9
p71=v10+'+0.02142857143*v[1] ' +h9
p72=v10+'+0.01428571429*v[1] 0.03773571429*v[0]+'+h9
p73=v10+'+0.006521428571*v[1] -0.03478571429*v[0]+'+h10
p74=v10+' '+h10
p75=v10+'-0.03265*v[1] '+h10
p76=v11+'+0.03265*v[1] '+h10
p77=v11+' '+h10
p78=v11+'-0.006521428571*v[1] -0.03478571429*v[0]+'+h10
p79=v11+'-0.01428571429*v[1] 0.03773571429*v[0]+'+h9
p80=v11+'-0.02142857143*v[1] '+h9
p81=v11+'+0.01428571429*v[1] '+h9

cond=v1+'_if_'+h2+'<'+h7+'_else_'+p11.split()[0]














caixa={
    "nom":"electronica-",
    "client":"fotodekora",
    "any": 2022,
    "mes:": 12,
    "versió": 1,
    "ca":"Caixa indicada per a productes fràgils o material d'elctrónica amb al menys doble cartro a totes les cares, només obrir tenim un espai superior per a instruccions, cables i/o transformadors",
    "es":"Caja insicada para productos fràgiles o de electrónica, con al menos dos capas de cartón en cualquiera de las caras, al abrir tenemos una bandeja superior situar para cables, folletos o un transformador",
    "en":"Carboard box indicated for fragile products or electronic material with at least double cardboard on all sides, just open it we have an upper tray for instructions, cables and/or transformers",
    "variables":{
        "v[0]":{"eti":"ample","es":"ancho","en":"width","rang":[50,1000,2],"val":140},
        "v[1]":{"eti":"llarg","es":"largo","en":"length","rang":[50,1000,2],"val":140},    
        "v[2]":{"eti":"altura pincipal","es":"altura principal","en":"main height","rang":[30,1000,2],"val":200},
        "v[3]":{"eti":"solapa","es":"solapa","en":"flap","rang":[3,40,2], "val":25},
        "v[4]":{"eti":"altura accesoris","es":"altura accesorios","en":"accessories height","rang":[20,500,2],"val":41.5},
        "v[5]":{"eti":"gruix cartro","es":"grosor del carton","en":"carton thickness","rang":[.1,20,2],"val":1.5},
        },
    "minx":minx,
    "miny":miny,
    "maxx":maxx,
    "maxy":maxy,
    "grupsSVG":{
        "hendit1":
                {
                "color":"red",
                "path" : ['M -v[0]-v[1] 0',
                        'h v[1]',
                        'v -v[2]',
                        'M  0 -v[2]',
                        'v v[2]',
                        'h v[1]',
                        'v -v[2]']
                },
        "tall1" :
                {
                "color": "blue",
                "path" : [
                        'M v[1]+v[0]-v[5] -v[2]',
                        'V 0',
                        'H v[1]+v[5]',
                        'c -0.552284866666667*v[5] 0 -0.9996106*v[5] 0.447325753333333*v[5] -0.9996106*v[5] 0.9996106*v[5] 0 0.436080133333333*v[5] 0.277391933333333*v[5] 0.808435133333333*v[5] 0.667240066666667*v[5] 0.943382533333333*v[5] ',
                        'c 0.193764213333333*v[5] 0.0672158666666667*v[5] 0.332370533333333*v[5] 0.267395866666667*v[5] 0.332370533333333*v[5] 0.472316*v[5] ',
                        'V .5*(v[0]+v[5])',
                        'H -v[5]',
                        'V 2.41466666666666*v[5]',
                        'c 0.000202466666666667*v[5] -0.2049356*v[5] 0.137976*v[5] -0.404611733333333*v[5] 0.332370533333333*v[5] -0.472316*v[5] ',
                        'c 0.1440566*v[5] -0.0498286666666667*v[5] 0.2759172*v[5] -0.133912933333333*v[5] 0.3823996*v[5] -0.242926466666667*v[5] 0.2857312*v[5] -0.284193266666667*v[5] 0.3659352*v[5] -0.747100133333333*v[5] 0.196571533333333*v[5] -1.1119248*v[5] -0.154517133333333*v[5] -0.351912446666667*v[5] -0.5266296*v[5] -0.593284313333333*v[5] -0.911341666666667*v[5] -0.58814182*v[5] ',
                        'H -v[0]+v[5]',
                        'c -0.552284866666667*v[5] 0 -0.9996106*v[5] 0.447325753333333*v[5] -0.9996106*v[5] 0.9996106*v[5] 0 0.436080133333333*v[5] 0.277391933333333*v[5] 0.808435133333333*v[5] 0.667240066666667*v[5] 0.943382533333333*v[5] ',
                        'c 0.193764213333333*v[5] 0.0672158666666667*v[5] 0.332370533333333*v[5] 0.267395866666667*v[5] 0.332370533333333*v[5] 0.472316*v[5] ',
                        'V .5*(v[0]+v[5])',
                        'H -v[0]-v[1]-v[5]',
                        'V 2.41466666666666*v[5]',
                        'c 0.000202466666666667*v[5] -0.2049356*v[5] 0.137976*v[5] -0.404611733333333*v[5] 0.332370533333333*v[5] -0.472316*v[5] ',
                        'c 0.1440566*v[5] -0.0498286666666667*v[5] 0.2759172*v[5] -0.133912933333333*v[5] 0.3823996*v[5] -0.242926466666667*v[5] 0.1851952*v[5] -0.1841984*v[5] 0.284050133333333*v[5] -0.443473*v[5] 0.2845734*v[5] -0.7024576*v[5] ',
                        'L -v[0]-v[1] 0',
                        'V -v[2]',
                        
                        'Z '
                        ]
                },
                
        "hendit_reves" :
                {
                "color": "green",
                "path" : [
                    'M '+p3,
                    'L '+p4,
                    'L '+p1,
                    'L '+p2,
                    'Z '
                ]
                },
        "hendit" :
                {
                "color": "red",
                "path" : [
                    'M '+p6,
                    'L '+p5,
                    'M '+v1+' '+h3,
                    'H '+v2,
                    'M '+p9,
                    'L '+p10,
                    'M '+v3+' '+h3,
                    'H '+v4,
                    'M '+v4+' '+h2,
                    'H '+v3,
                    'M '+v2+' '+h2,
                    'H '+cond, #aqui
                    'M '+p8,
                    'L '+p7,
                    'M '+p11,
                    'L '+p12,
                    'M '+p13,
                    'L '+p14,
                    'M '+p15,
                    'L '+p16,
                    'M '+p17,
                    'L '+p18,
                    'M '+p19,
                    'L '+p20,
                    'M '+p21,
                    'L '+p22,
                    'M '+p23,
                    'L '+p24,
                    'M '+p25,
                    'L '+p26,
                    'M '+p27,
                    'L '+p8,
                    'M '+p28,
                    'L '+p29,
                    'M '+p30,
                    'L '+p31
                    ]
                },
        "tall" :
                {
                "color": "blue",
                "path" : [
                    'M '+p10,
                    'L '+v6+'-1.666666666666667*v[5] '+h5+'-0.24*v[3]',
                    'L '+v6+'-0.4166666666666667*v[5] '+h5+'-0.67536*v[3]',
                    'q 0.6573333333*v[5] -3.410666667*v[5] 3.956666667*v[5] -3.410666667*v[5]',
                    'H '+v5+'-3.423333333*v[5]',
                    'q 3.423333333*v[5] 0 3.956666667*v[5] 3.410666667*v[5]',
                    'L '+v5+'+1.666666666666667*v[5] '+h5+'-0.24*v[3]',
                    'L '+p9,

                    'M '+v5+'+0.4166666666666667*v[5] '+h5+'-v[5]',
                    'H -2.5*v[5]',
                    'q 2*v[5] 0 2*v[5] 2*v[5]',
                    'L '+p13,
                    'A 1.083333333*v[5] 1.083333333*v[5] l0 l0 l0 +1.66666666666667*v[5] '+h1,
                    'V '+h4+'+5*v[5]',
                    'q 0 -4*v[5] 4*v[5] -4*v[5]',
                    'H '+v1+'-4*v[5]',
                    'q 4*v[5] 0 4*v[5] 4*v[5]',
                    'V '+h7+'-2.717333333*v[5]',
                    'q 0 2.717333333*v[5] 2.717333333*v[5] 2.717333333*v[5]',
                    #'H '+m1+'-3.133333333*v[5]',
                    #'q 1.466666667*v[5] 0.49*v[5] 1.466666667*v[5] 1.916666667*v[5]',
                    'H v[0]+2*v[5]',
                    'q 1.666666667*v[5] 0 1.666666667*v[5] 1.666666667*v[5]',
                    'V '+h1+'+0.594*v[5]',
                    'A 1.083333333*v[5] 1.083333333*v[5] l0 l0 l0 '+p8,
                    'L '+p5,
                    'L '+p1,
                    'L '+p33,
                    'q -2.717333333*v[5] -0.9293333333*v[5] -2.717333333*v[5] -3.788666667*v[5]',
                    'L '+p34,
                    'q 0 -1.769333333*v[5] 2.717333333*v[5] -2.788666667*v[5]',
                    'L '+p2,
                    'L '+p36,
                    'Q '+p35+' '+p37,
                    'L '+p39,
                    'Q '+p38+' '+p40,
                    'L '+p3,
                    'L '+p41,
                    "Q "+p42+' '+p43,
                    'L '+p44,
                    'Q '+p45+' '+p46,
                    'L '+p4,
                    'L '+p6,
                    'L '+p7,
                    'V '+p26.split()[1],
                    'L '+p26,
                    'L '+p48,
                    'L '+p49,
                    'q 0 4*v[5] -4*v[5] 4*v[5]',
                    'L '+p50,
                    'q -4*v[5] 0 -4*v[5] -4*v[5]',
                    'L '+p51,
                    'L '+p25,
                    'A 0.5333333333*v[5] 0.5333333333*v[5] l1 l0 l0 '+p52,
                    'L '+p53,
                    'L '+p54,
                    'A 0.04285714286*v[1] 0.04285714286*v[1] l0 l0 l1 '+p55,
                    'L '+p56,
                    'A v[5] v[5] l0 l0 l0 '+p57,
                    'A 0.58505*v[0]+7*v[5] 0.58505*v[0]+7*v[5] l0 l0 l1 '+p23,
                    'A .5*v[5] .35*v[5] l20 l0 l0 '+p22.split()[0]+' '+p23.split()[1]+'-0.09066666667*v[5]',
                    'L '+p58,
                    'q 0 4*v[5] -4*v[5] 4*v[5]',
                    'L '+p59,
                    'q -4*v[5] 0 -4*v[5] -4*v[5]',
                    'L '+p21.split()[0]+' '+p23.split()[1]+'-0.09066666667*v[5]',
                    'A .5*v[5] .35*v[5] l-20 l0 l0 '+p20,
                    'A 0.58505*v[0]+7*v[5] 0.58505*v[0]+7*v[5] l0 l0 l1 '+p60,
                    'A v[5] v[5] l0 l0 l0 '+p61,
                    'L '+p62,
                    'A 0.04285714286*v[1] 0.04285714286*v[1] l0 l0 l1 '+p63,
                    'L '+p64,
                    'L '+p19,
                    'L '+p18,
                    'L '+p65,
                    'L '+p66,
                    'L '+p17,
                    'L '+p16,
                    'L '+p67,
                    'L '+p68,
                    'V -4*v[5]+'+h4,
                    'q 0 -4*v[5] 4*v[5] -4*v[5]',
                    'H -4*v[5]+'+v3,
                    'q +4*v[5] 0 4*v[5] 4*v[5]',
                    'V '+p14.split()[1],
                    'A 1.083333333*v[5] 1.083333333*v[5] l0 l0 l0 '+p14,
                    'V '+h5+'+v[5] ',
                    'q 0 -2*v[5] 2*v[5] -2*v[5]',
                    'H '+v6+'-0.4166666666666667*v[5]',


                    'M '+p69,
                    'a 11.5 11.5 l0 l0 l0 22.5 0',
                    
                    'M '+v8+' '+h1,
                    'q 0 -(5/3)*v[5] (5/3)*v[5] -(5/3)*v[5]',
                    'H '+v9+'-(5/3)*v[5]',
                    'q (5/3)*v[5] 0 (5/3)*v[5] (5/3)*v[5]',
                    'q 0 (5/3)*v[5] -(5/3)*v[5] (5/3)*v[5]',
                    'H '+v8+'+(5/3)*v[5]',
                    'q -(5/3)*v[5] 0 -(5/3)*v[5] -(5/3)*v[5]',



                    'M '+p70,
                    'Q '+p71+' '+p72,
                    'L '+p73,
                    'Q '+p74+' '+p75,
                    'L '+p76,
                    'Q '+p77+' '+p78,
                    'L '+p79,
                    'Q '+p80+' '+p81,
                    'Z'             
                    ]
                    
            }

    }
}



with open('c:\caixes\electronica.json', 'w') as f:
    json.dump(caixa, f, indent=4, sort_keys=True)


print ('JSON')

rate  = 3.77953232067064    #proporcio d'unitats svg / mm  CorelDraw
pth ="c:\caixes\\" #ruta de eixida fitxer




def demana_valors(obje): #funcio que demana a l'usuari els valor per a les variables 
    v =[]
    fname=pth+"prova.svg"
    for i in obje["variables"]:        
        v.append(caixa["variables"][i]["val"])
    
    return v,fname

def genera_path(grup,obje): #genera el path d'un grup evaluant les formules 
    cadena=""
    for j in obje["grupsSVG"][grup]["path"]: # j es una llista de ordres de un path svg parametritzades amb variables
        cadena+=j[:2] #els dos primers caracter son: ordre svg + espai en blanc
        #print(j)
        for k in j[2:].split():
            if k[0] == "l":
                cadena += k[1:] +" "
            else:
                k=str(k).replace('_',' ')
                print(k,"=",eval(k))
                cadena+=str(eval(k)*rate)+" " #evalua cada fórmula aplicant els valors v[]
    return cadena

with open('c:\caixes\electronica.json', "r") as file: #importa una caixa paramentrizada en json
    caixa = json.load(file)


v, filename =demana_valors(caixa)


dwg = svgwrite.Drawing(filename, profile='tiny') # Crea un SVG Nom fitxer i ruta

for i in caixa["grupsSVG"].keys():    
    group = dwg.add(dwg.g(id=i)) #afegeix grup al SVG 
    print(i)
    group.add(dwg.path(genera_path(i,caixa)).stroke(color=caixa["grupsSVG"][i]["color"]).fill(color="none")) #afegeix path al grup

dwg.save() #tanca el fitxer SVG

print("\nel fitxer resultat es en" , filename)
